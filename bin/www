#!/usr/bin/env node

// Module Imports
var app = require('../app');
var debug = require('debug')('mixstudios:server');
var http = require('http');
const https = require('https');
const fs = require('fs');

// Socket.io
const socketio = require('socket.io', { path: '/' });
const threadSocketEvents = require('../webSockets/commentThreads/thread');
const { messengerSocketEvents } = require('../webSockets/messenger/messenger');
const { utilitySocketEvents } = require('../webSockets/utilitySockets/utilitySockets');

//•••••••••••••••••••••••••••
//•••••••••••••••••••••••••••

// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '8080');

console.log('This work correctly?', process.env.AWS_SECRET_ACCESS_KEY)

app.set('port', port);
app.set('secPort', port + 443);

// Create Server

let io;
const server = http.createServer(app);

server.listen(port, () => {
	console.log(`HTTP server running on: ${port}`);
});
server.on('error', onError);
server.on('listening', onListening);

io = socketio(server);

const httpsOptions = {
	key: fs.readFileSync(__dirname + '/server.key'),
	cert: fs.readFileSync(__dirname + '/server.cert'),
};

const secureServer = https.createServer(httpsOptions, app);

secureServer.listen(app.get('secPort'), () => {
	console.log('HTTPS listening on port', app.get('secPort'));
});
secureServer.on('error', onError);
secureServer.on('listening', onListening);

//•••••••••••••••••••••••••
//  Socket.io Connections
//•••••••••••••••••••••••••

io.on('connection', (socket) => {
	//-----------------
	// COMMENT THREADS
	//-----------------
	socket.on('open_comment_thread', ({ threadTitle }, callback) =>
		threadSocketEvents(threadTitle, socket, io, callback)
	);

	//-----------------
	//  MESSENGER
	//-----------------
	socket.on('open_messenger', ({ userId }, callback) =>
		messengerSocketEvents(userId, socket, io, callback)
	);

	//--------------------
	//  UTILITY
	//--------------------
	socket.on('open_utility', (callback) => {
		// if (callback) {
		// 	callback({ msg: `Made search for ${artist}` });
		// }
		utilitySocketEvents(socket, io, callback);
	});

	// SOCKET CLOSURE
	socket.on('disconnect', () => {
		return console.log(`Closed Socket.IO connection: ${socket.id}`);
	});
});

//•••••••••••••••••••••••••
//  File Util
//•••••••••••••••••••••••••

// Normalize a port into a number, string, or false.
function normalizePort(val) {
	var port = parseInt(val, 10);
	if (isNaN(port)) {
		return val;
	}
	if (port >= 0) {
		return port;
	}
	return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}
	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

// Event listener for HTTP server "listening" event.
function onListening() {
	let addr;
	addr = app.address;
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + port;
	debug('Listening on ' + bind);
}
