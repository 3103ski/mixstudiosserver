#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');

var debug = require('debug')('mixstudios:server');

var http = require('http');
const https = require('https');

const socketio = require('socket.io', { path: '/' });

const fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');

app.set('port', port);
app.set('secPort', port + 443);

/**
 * Create HTTP server.
 */

let io;

var server = http.createServer(app);

server.listen(port, () => {
	console.log(`HTTP server running on: ${port}`);
});
server.on('error', onError);
server.on('listening', onListening);

const httpsOptions = {
	key: fs.readFileSync(__dirname + '/server.key'),
	cert: fs.readFileSync(__dirname + '/server.cert'),
};

const secureServer = https.createServer(httpsOptions, app);

io = socketio(server);

secureServer.listen(app.get('secPort'), () => {
	console.log('HTTPS listening on port', app.get('secPort'));
});
secureServer.on('error', onError);
secureServer.on('listening', onListening);

//••••••••••••••••••••
//   SOCKET IO
//••••••••••••••••••••

io.on('connection', (socket) => {
	console.log('IO User Connection: ', socket.id);

	socket.on('open_conversation', ({ user, convoId }, callback) => {
		console.log(`${user} is opening a conversation with id ${socket.id}`);
		callback('Socket.Io sees you entering');
		if (convoId) {
			console.log('This is the convo id: ', convoId);
		}
		return socket.on('disconnect', () => {
			callback('Socket.io sees you leaving');
			console.log(`${user} is closing the conversation ${socket.id}`);
		});
	});
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	let addr;
	addr = app.address;
	// console.log('RUNNING: production https');

	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + port;
	debug('Listening on ' + bind);
}
